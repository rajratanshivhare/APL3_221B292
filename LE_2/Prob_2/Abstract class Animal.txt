// Abstract class Animal
abstract class Animal {
    abstract void makeVoice();  // Abstract method to be implemented by subclasses
}

// Subclasses of Animal implementing makeVoice()
class Cow extends Animal {
    @Override
    void makeVoice() {
        System.out.println("Cow: Moo Moo!");
    }
}

class Dog extends Animal {
    @Override
    void makeVoice() {
        System.out.println("Dog: Woof Woof!");
    }
}

class Pig extends Animal {
    @Override
    void makeVoice() {
        System.out.println("Pig: Oink Oink!");
    }
}

class Goat extends Animal {
    @Override
    void makeVoice() {
        System.out.println("Goat: Baa Baa!");
    }
}

class Lion extends Animal {
    @Override
    void makeVoice() {
        System.out.println("Lion: Roar!");
    }
}

// Voice2 class enforcing the correct method execution order using Template Method
class Voice2 {
    private Animal[] animals = new Animal[5]; // Array of Animal references

    // Method to initialize the animal array
    private void prepareVoice() {
        animals[0] = new Cow();
        animals[1] = new Dog();
        animals[2] = new Pig();
        animals[3] = new Goat();
        animals[4] = new Lion();
    }

    // Method to call makeVoice() for each animal
    private void hear() {
        for (Animal animal : animals) {
            animal.makeVoice();
        }
    }

    // Template method ensuring the correct order of execution
    public void templateMethod() {
        prepareVoice(); // Step 1: Prepare animals
        hear();         // Step 2: Hear their voices
    }
}

// Test class with main method
public class Test {
    public static void main(String[] args) {
        Voice2 voice = new Voice2();
        voice.templateMethod(); // Enforces correct sequence
    }
}
